package compUnit;


import org.eclipse.cdt.core.dom.ast.ASTVisitor;
import org.eclipse.cdt.core.dom.ast.IASTContinueStatement;
import org.eclipse.cdt.core.dom.ast.IASTDeclarator;
import org.eclipse.cdt.core.dom.ast.IASTFunctionDeclarator;
import org.eclipse.cdt.core.dom.ast.IASTNode;
import org.eclipse.cdt.core.dom.ast.IASTParameterDeclaration;
import org.eclipse.cdt.core.dom.ast.IASTStatement;
import org.eclipse.cdt.core.dom.ast.IASTTranslationUnit;
import org.eclipse.cdt.core.model.ITranslationUnit;
import org.eclipse.cdt.internal.core.dom.parser.c.CASTFunctionDeclarator;
import org.eclipse.cdt.internal.core.dom.parser.c.CASTName;
import org.eclipse.core.runtime.CoreException;

import project.metamodel.entity.XCCompUnit;
import project.metamodel.entity.XCContinueStatement;
import project.metamodel.entity.XCFunctionDeclarator;
import project.metamodel.factory.Factory;
import ro.lrg.xcore.metametamodel.Group;
import ro.lrg.xcore.metametamodel.IPropertyComputer;
import ro.lrg.xcore.metametamodel.PropertyComputer;

@PropertyComputer
public class Rule16_5 implements IPropertyComputer<String, XCCompUnit>{
	String s=" ";
	
	@Override
  public String compute(XCCompUnit arg0) {
	IASTTranslationUnit a = null;
	ITranslationUnit m=null;
	ASTVisitor v;
	Group<XCFunctionDeclarator> res = new Group<>();
	try {
	m=(ITranslationUnit)arg0.getUnderlyingObject();
	a= m.getAST();
	}
	catch(CoreException e)
	{
		e.printStackTrace();
	}
    v=new ASTVisitor() {
	
	public int visit(IASTDeclarator c) {
            s=" ";
			if(c instanceof  CASTFunctionDeclarator) {
				//IASTNode children[] = c.getChildren();
				/* if(children.length == 1)
				 {
					XCFunctionDeclarator p=Factory.getInstance().createXCFunctionDeclarator(c);
					res.add(p);
					
				 }*/
				s="aaa";
			
				
			}
				
		
		return 3;
	}
	

	};
	v.shouldVisitDeclarators = true;
	a.accept(v);
	/*for(XCFunctionDeclarator c : res.getElements())
	{
		s=s+ c.toString()+" "; 
	}*/
	 return s;
 
}
}



